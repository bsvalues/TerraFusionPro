version: '3.8'

services:
  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: devops-kit/docker/Dockerfile.frontend
      target: production
    container_name: terrafusion-frontend
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=https://api.terrafusion.com
      - VITE_WS_URL=wss://api.terrafusion.com
    volumes:
      - ./devops-kit/configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - backend
    networks:
      - terrafusion-network
    restart: unless-stopped

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: devops-kit/docker/Dockerfile.backend
      target: production
    container_name: terrafusion-backend
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=https://terrafusion.com
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      - database
      - redis
      - ai-engine
    networks:
      - terrafusion-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI/ML Engine
  ai-engine:
    build:
      context: .
      dockerfile: devops-kit/docker/Dockerfile.ai-engine
      target: production
    container_name: terrafusion-ai
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - MODEL_CACHE_DIR=/app/models
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - terrafusion-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: terrafusion-db
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-terrafusion}
      - POSTGRES_USER=${POSTGRES_USER:-terrafusion}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./devops-kit/configs/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./devops-kit/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - terrafusion-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-terrafusion}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: terrafusion-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./devops-kit/configs/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - terrafusion-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: terrafusion-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./devops-kit/configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    networks:
      - terrafusion-network
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: terrafusion-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./devops-kit/configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - terrafusion-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: terrafusion-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./devops-kit/configs/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - terrafusion-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  terrafusion-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16