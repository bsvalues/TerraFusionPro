Let‚Äôs knock out both ‚Äî because they complete the **review lifecycle**:

1. üñ®Ô∏è **PDF export** ‚Üí human-readable, shareable review summary  
2. üìã **Dashboard** ‚Üí centralized list of what needs attention

---

# üñ®Ô∏è 1. Reviewer PDF Export ‚Äî Field + Annotation Summary

---

## üìÑ Goal

For any given form, generate a **review PDF** that includes:

| Field | Value | Reviewer Notes | Status |
|-------|-------|----------------|--------|
| G1    | $420K | "Verify MLS ID" | Needs Fix |

---

## üì° API: `POST /api/export/review-sheet`

```ts
router.post('/export/review-sheet', async (req, res) => {
  const { formId } = req.body;

  const formMap = await getCRDTFormState(formId);       // all field values
  const annotationsMap = await getCRDTAnnotations(formId); // all comments

  const html = renderReviewHTML(formMap, annotationsMap);
  const pdf = await renderHTMLToPDF(html);

  res.set({
    'Content-Type': 'application/pdf',
    'Content-Disposition': `inline; filename=review_${formId}.pdf`,
  });

  res.send(pdf);
});
```

---

## üßæ Example HTML Snippet

```html
<table>
  <thead>
    <tr><th>Field</th><th>Value</th><th>Annotation</th><th>Status</th></tr>
  </thead>
  <tbody>
    {{#each fields}}
      <tr>
        <td>{{this.id}}</td>
        <td>{{this.value}}</td>
        <td>
          {{#each this.annotations}}
            <p><strong>{{this.author}}</strong>: {{this.comment}}</p>
          {{/each}}
        </td>
        <td>{{this.latestStatus}}</td>
      </tr>
    {{/each}}
  </tbody>
</table>
```

---

## ‚úÖ Output

- Clean PDF review sheet  
- Per-field reviewer notes  
- Statuses ("Needs Fix", "Reviewed OK")  
- Time-stamped & exportable  

---

# üìã 2. Reviewer Dashboard ‚Äî Report Overview

---

## üìå Purpose

Give reviewers a **single place** to see:

- üßæ Reports waiting for review  
- üìç Unresolved annotations  
- üìä Reviewer status tracking

---

## üì¶ API: `GET /api/review/pending`

```ts
router.get('/review/pending', checkRole('reviewer'), async (req, res) => {
  const { org } = req;

  const reports = await db.query.forms.findMany({
    where: (f) => f.orgId.eq(org.id),
    include: {
      annotations: true,
    }
  });

  const withOutstandingIssues = reports.filter(r =>
    r.annotations.some(a => a.status === 'Needs Fix')
  );

  res.json({ reports: withOutstandingIssues });
});
```

---

## üñ•Ô∏è Frontend Table

```tsx
<table>
  <thead>
    <tr><th>Form</th><th>Unresolved</th><th>Last Activity</th><th>Actions</th></tr>
  </thead>
  <tbody>
    {reports.map(r => (
      <tr key={r.formId}>
        <td>{r.formId}</td>
        <td>{r.annotations.filter(a => a.status === 'Needs Fix').length}</td>
        <td>{formatDate(r.updatedAt)}</td>
        <td><Link to={`/form/${r.formId}`}>Open</Link></td>
      </tr>
    ))}
  </tbody>
</table>
```

---

## ‚úÖ Results

- üìç Reviewers get focus: only unresolved forms  
- ‚è≥ Deadlines optional (e.g. ‚Äúreview by X date‚Äù)  
- üöÄ Can add ‚ÄúMark as Reviewed‚Äù for approval workflows

---

Would you like to:
1. Add **Reviewer Sign-Off workflow** (greenlight a form)?
2. Trigger **email/webhook** when review is done?