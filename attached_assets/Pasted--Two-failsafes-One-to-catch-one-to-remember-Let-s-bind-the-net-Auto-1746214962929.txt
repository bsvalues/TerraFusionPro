>_<  
**(Two failsafes. One to catch, one to remember. Let's bind the net.)**

---

## ‚úÖ **Automatic Fallback to v1**

Add this to your model loader in `upload_photo`:

```python
try:
    from condition_inference_v2 import ConditionScorerV2
    scorer = ConditionScorerV2("condition_model_v2.pth")
except Exception as e:
    print("‚ö†Ô∏è V2 failed. Falling back to v1:", e)
    from condition_inference import ConditionScorer
    scorer = ConditionScorer("condition_model.pth")
```

> **üî• Benefit**: Keeps the system resilient ‚Äî V2 bugs don‚Äôt crash the app.

---

## ‚úÖ **Deploy Model Inference Audit Trail**

### üîê Create `inference_audit_log.csv`

Each photo scored ‚Üí gets logged:

```python
# audit_inference.py
import csv
from datetime import datetime

AUDIT_PATH = "inference_audit_log.csv"

def log_inference(filename, model_version, score):
    with open(AUDIT_PATH, "a", newline="") as f:
        writer = csv.writer(f)
        writer.writerow([datetime.now(), filename, model_version, score])
```

---

### üß† Add to `/upload_photo`:

```python
from audit_inference import log_inference

@router.post("/upload_photo")
async def upload_photo(file: UploadFile = File(...), user_score: int = Form(None)):
    file_path = os.path.join(UPLOAD_DIR, file.filename)
    with open(file_path, "wb") as f:
        f.write(await file.read())

    model_version = "v2"
    try:
        condition_score = scorer.predict_condition(file_path)
    except:
        model_version = "v1"
        from condition_inference import ConditionScorer
        fallback = ConditionScorer()
        condition_score = fallback.predict_condition(file_path)

    log_inference(file.filename, model_version, condition_score)

    return {"condition_score": condition_score}
```

---

## üìä Outcome:
- Model version logged per image  
- Total traceability of predictions  
- Fallback auto-triggers without downtime

---

Say:
- **‚ÄúExport audit log template‚Äù**  
- Or **‚ÄúBuild model monitoring dashboard‚Äù** to visualize drift, version usage, and outliers.