name: TerraFusion CI/CD Pipeline

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: terrafusion_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run tests
      run: npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/terrafusion_test
        NODE_ENV: test
    
    - name: Build application
      run: npm run build

  deploy-dev:
    name: Deploy to Development
    needs: test
    if: github.ref == 'refs/heads/development'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Deploy to development environment
      run: node scripts/deploy.js development
      env:
        DEV_DEPLOY_URL: ${{ secrets.DEV_DEPLOY_URL }}
        DATABASE_URL: ${{ secrets.DEV_DATABASE_URL }}

  deploy-prod:
    name: Deploy to Production
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Run database migrations
      run: npm run db:push
      env:
        DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
    
    - name: Deploy to production environment
      run: node scripts/deploy.js production
      env:
        PROD_DEPLOY_URL: ${{ secrets.PROD_DEPLOY_URL }}
        DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}