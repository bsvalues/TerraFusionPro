name: TerraFusionPro Enterprise Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run SAST
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript, python
          
      - name: Run Dependency Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          
      - name: Run Container Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Linting
        run: |
          npm run lint
          python -m flake8
          
      - name: Run Tests
        run: |
          npm run test
          python -m pytest
          
      - name: Run Coverage
        run: |
          npm run coverage
          python -m pytest --cov=./ --cov-report=xml

  build:
    name: Build and Push
    needs: [security-scan, quality-gates]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          
      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster terrafusionpro-${{ github.event.inputs.environment || 'staging' }} \
            --service terrafusionpro \
            --force-new-deployment
            
      - name: Wait for Deployment
        run: |
          aws ecs wait services-stable \
            --cluster terrafusionpro-${{ github.event.inputs.environment || 'staging' }} \
            --services terrafusionpro

  post-deployment:
    name: Post-Deployment Checks
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Health Checks
        run: |
          ./scripts/health-check.sh ${{ github.event.inputs.environment || 'staging' }}
          
      - name: Verify Metrics
        run: |
          ./scripts/verify-metrics.sh ${{ github.event.inputs.environment || 'staging' }}
          
      - name: Check Logs
        run: |
          ./scripts/check-logs.sh ${{ github.event.inputs.environment || 'staging' }}

  notify:
    name: Notify Team
    needs: [deploy, post-deployment]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
        
      - name: Notify Email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: Deployment Status - ${{ github.event.inputs.environment || 'staging' }}
          body: |
            Deployment Status: ${{ job.status }}
            Environment: ${{ github.event.inputs.environment || 'staging' }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: TerraFusionPro CI/CD
        if: always() 